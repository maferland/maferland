{
  "title": "Publishing a hooks library with minimal config",
  "slug": "publishing-library-minimal-config",
  "date": "2020-09-30T01:40:24.234Z",
  "image": {
    "url": "/img/rose-main-reading-room.jpg",
    "alt": "Library reading room"
  },
  "description": "Looking to create your own react library? Want to avoid using create-react-library? Let me walk you through a super simple solution using developit/microbundle!",
  "body": "## Setting up\n\nFirst thing first, this might not be optimal! However, this is the fastest way I found to build/publish a library. My project is here. As of writing this, the README is empty, there's no examples nor test. But for the sake of _shipping it_ it's online. Use it at your own risk ðŸ˜œ.\n\nFirst, let's init our package.json\n```\nnpm init --yes\n```\n\nThen, install our dependencies. I'll skip explaining the linting and publishing steps as there is a lot of great articles on the topic.\n\n```\nyarn add -D react react-dom microbundle\n```\n\n`react` and `react-dom` are pretty straightforward. [microbundle](https://github.com/developit/microbundle) is a really sweet project I found while looking if I could use [parcel](https://github.com/parcel-bundler/parcel/) for the task. It does everything I need and it works with barely any config.\n\n\n## Configuring our bundler\n\nAs I said, there's really not a lot to do here! Add this to your package.json!\n\n```\n  \"source\": \"src/index.js\",\n  \"main\": \"dist/hooks.js\",\n  \"module\": \"dist/hooks.module.js\",\n  \"unpkg\": \"dist/hooks.umd.js\",\n```\nBasically, we're saying `index.js` is our entry file and the other three are the output file for each bundle type.\n\nThen, we can add two new scripts to use microbundle.\n\n```\n  \"build\": \"microbundle\",\n  \"dev\": \"microbundle watch\",\n```\n`build` will bundle everything and output it into the `dist/` folder while `dev` will let us work on our hooks in peace.\n\nRight now, nothing should work as we didn't code anything just yet.\n\n## Creating your custom hook\n\nHere's what your repo will look like in just a few seconds:\n\n```\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ index.js\nâ”‚   â””â”€â”€ use-interval.js\nâ””â”€â”€ yarn.lock\n```\n\nYou have to create a `src/` folder and add `index.js` and `use-interval.js`. We will define the following hook in `use-interval.js`:\n\n```\nimport {useRef, useEffect} from 'react'\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null) {\n      return () => {}\n    }\n    const id = setInterval(() => savedCallback.current(), delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n```\n\nI didn't write this hook. I simply updated Dan Abramov's implementation of the useInterval hook. There's a brilliant [article](https://overreacted.io/making-setinterval-declarative-with-react-hooks/) about this hook and you should definitely read it to learn why you might not simply be able to use setInterval with react hooks. \n\nI needed it for another project and felt like making a lib out of it ðŸ™ƒ.\n\nThen, for your `index.js` we simply want an entry point for us to import the hook in another project.\n\n```\nexport {default as useInterval} from './use-interval'\n```\n\nWe're set! `yarn build` should generate something like this:\n\n```\nâ”œâ”€â”€ dist\nâ”‚   â”œâ”€â”€ hooks.js\nâ”‚   â”œâ”€â”€ hooks.js.map\nâ”‚   â”œâ”€â”€ hooks.modern.js\nâ”‚   â”œâ”€â”€ hooks.modern.js.map\nâ”‚   â”œâ”€â”€ hooks.module.js\nâ”‚   â”œâ”€â”€ hooks.module.js.map\nâ”‚   â”œâ”€â”€ hooks.umd.js\nâ”‚   â””â”€â”€ hooks.umd.js.map\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ index.js\nâ”‚   â””â”€â”€ use-interval.js\nâ””â”€â”€ yarn.lock\n```\n\n## Publishing time!\n\nI don't want to get into the specifics here but make sure you fill your `peerDependencies`, `repository` and `bugs`:\n\n```\n  \"peerDependencies\": {\n    \"react\": \"^16.x\",\n    \"react-dom\": \"^16.x\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/maferland/hooks.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/maferland/hooks/issues\"\n  }\n```\n\nThen you can proceed with npm cli:\n```\nnpm login\nnpm publish --access=public     \n```\n\nThen in any other project you can run `yarn add @maferland/hooks` to install your library. I was able to `import { useInterval } from '@maferland/hooks' and make it work out of the box as you can see in this here [commit](https://github.com/maferland/maferland/commit/8df2b1aa73925f8a9277cb5ffe1fde4a4e8c4f2e).\n\n## Wishfull thinking\n\nI'll try to refine this repo to add and deploy an example project soon! I will definitely write a doc as well. Let me know if you have any questions or comments. Enjoy!\n"
}