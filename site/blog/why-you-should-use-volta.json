{
  "title": "Why you should use Volta",
  "slug": "why-use-volta",
  "date": "2021-02-27T17:42:35.595Z",
  "image": {
    "url": "/img/power-pylon.jpg",
    "alt": "Power pylons at sunset"
  },
  "description": "Volta is a tool to reduce the friction with package manager versions",
  "body": "## Why should I change my workflow\nI don't have a large case study about the benefits of using Volta. The reason is pretty simple. Volta just works‚Ñ¢Ô∏è. I tend to forget about it. I think that if you start to forget about a tool you're using daily it's a pretty good indication of how frictionless the tool is.\n \nI have been using the **Y**arn **V**ersion **M**anager (YVM) and the **N**ode **V**ersion **M**anager (NVM). And yeah... I can't really recommend those. They work, don't get me wrong. But I never forgot about them. Even with the `.yvmrc` and `.nvmrc` files to save the version of each of my projects once in a while you always have to run `nvm use` or `yvm use` to change the version.\n \nI don't want my tooling to take a toll on my dev time. Neither do I want it to be burdensome in any way. This is where Volta made a difference for me.\n \nVolta is the kind of tool that does everything silently and doesn't really require your input.\n \nYou can install and manage your versions simply:\n \n```\nvolta install node@x.y.z\nvolta install yarn@a.b.c\n```\n \nThen, you simply need to `pin` the yarn and node version for a project and Volta will handle the rest of it. It's magic:\n \n```\nvolta pin node@12.19.0\nvolta pin yarn@1.22.10\n```\n \nVolta will add this in your package.json:\n \n```\n \"volta\": {\n \"node\": \"12.19.0\",\n \"yarn\": \"1.22.10\"\n }\n```\n \nWhenever you will `cd` into this folder in the future Volta will automatically know it needs to use this specific version.\n \nVolta can also handle global for you. Yarn and Node aren't the only things it can manage for you. If you often find the need to install `http-server` for each version of node/yarn you're using then you could run `volta install http-server` and it will always be available. Volta handle all of this for you :)\n \n## Performance\n \nDid I mention how fast it was? I often found myself waiting a couple of seconds for NVM and YVM to boot whenever I opened a new console. It not the biggest deal one could say but every second I can shave in my dev process is important. Not so much for my time but for my concentration. \n \nVolta is written in rust and is as fast as it can get. As I said, I keep forgetting about it. The only reason I thought to write this article is that I had to reinstall it to my new dev workstation.\n \nIn the following example, you can notice how fast the folder change is even though the node version is changing. I still ran `node -v` and `yarn -v` but you can see that my env picked up the new node version immediately by looking at the `via Node v12.19.0`.\n \n<div style=\"position: relative; padding-bottom: 55.65693430656934%; height: 0;\"><iframe src=\"https://www.loom.com/embed/4e96d417c95d4d0495390f9839848151\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n \n## Drawback\nI guess having the pinned version info in the package.json is not to everyone's taste. I guess they could probably add a `.voltarc` in the future ü§∑‚Äç‚ôÇÔ∏è. Personally, it doesn't bother me.\n \n## Try it now\n \nGive it a shot, you won't regret it! If you don't like it you can always go back.\n \nüëâ https://volta.sh/ üëà\n \n```\n# install Volta\ncurl https://get.volta.sh | bash\n \n# install Node\nvolta install node\n \n# start using Node\nnode\n```"
}