{
  "title": "How to use Icomoon as a font-familly in Next.js",
  "slug": "icomoon-font-familly-nextjs",
  "date": "2020-04-18T23:05:24.198Z",
  "image": {
    "url": "/img/amanacer-playa-spain.jpg",
    "alt": "Sunrise at Playa de Huelin, Spain"
  },
  "description": "Most of the icon libraries available are SVG based. In some project, I found useful to have your icons as a font-family instead. Here is how I integrated Icomoon in a Next.js project.",
  "body": "## Getting started\n\nBefore going anywhere you have to create an [Icomoon account](https://icomoon.io/). This service allows creating custom icon packs. You can select Icon from various free and premium sources. This allows reducing the size of the icons your website has to load and gives much more flexibility if you want to import icons from a variety of packs. It also makes it very easy to add custom icons and use them in your project.\n\nThe free tier does all we need for this demo. Simply create an account, create a new project and pick the icons you'd like. \n\n![Icomoon dashboard](/img/icomoon.png)\n\nOnce you're ready, you can click on the `Generate font` then on the `Download` button. The archive contains the files we will need in the next step.\n\n## Importing the font\n\nNow that we have the required file we can proceed to import them in our project. For our purpose, we only need the `style.css` file and the `fonts` folder. The font folder will need to be served on our website. For this, simply move the `fonts` folder in the `public` directory of your Next.js website.\n\nThen, you can add the `style.css` file alongside your other global style files. I suggest renaming it to something else (icomoon, icons, etc). You can simply add the following in [./pages/_app.js](https://nextjs.org/docs/advanced-features/custom-app).\n\n```jsx\nimport '../styles/icons.scss';\n```\n\nThis solution will add some webpack config to load the font file with `url-loader`.\n\n```shell\nyarn add url-loader\n```\n\nThen, go to your next.config.js file and add the following snippet :\n\n```jsx\nwebpack(config) {\n config.resolve.alias['~'] = path.resolve(__dirname);\n config.module.rules.push({\n   test: /\\.(woff|woff2|eot|ttf|svg)$/,\n   loader: 'url-loader?limit=100000',\n });\n return config;\n},\n```\n\nThis will let know webpack that these file types should be loaded by `url-loader`. Hence why we needed to make sure our files are in the `public/` folder.\n\nWe should edit the content of the `style.css` to make sure our website is looking for the files at the right location.\n\n```jsx\n@font-face {\n font-family: 'icomoon';\n src: url('/fonts/icomoon.ttf?ixpxfq') format('truetype'),\n url('/fonts/icomoon.woff?ixpxfq') format('woff'),\n url('/fonts/icomoon.svg?ixpxfq#icomoon') format('svg');\n font-weight: normal;\n font-style: normal;\n font-display: block;\n}\n```\n\nWe simply add the prefixing slash to clarify that this isn't a relative path. These fille will be served from the root of your website. In my case, it's https://maferland.com/fonts/...\n\n## Using our shiny icons\n\nI made a little wrapper for my Icons\n\n```jsx\nconst Icon = (props) => {\n return <i className={`${props.icon} ${props.className}`} />;\n};\n \nexport default Icon;\n```\n\nThe way to use the icons might be slightly different if you changed the export configuration on Icomoon.\n\nThen, whenever I want to use an icon I simply have to write the following :\n\n```jsx\n<Icon icon=\"arrow-right\" />\n```\n\n## Conclusion\n\nThis whole solution allows me to use CSS properties that are exclusive to fonts. This might be a handy solution if you need to use `background-clip: text;` or `text-shadow` to apply a specific design.\n\nMost of the time, you should be able to load font files by using `file-loader` but I ran into some issue in Next.js which prompted me to find this solution with `url-loader`."
}